// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace NoBackingStore.Graph.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class DriveItem : global::NoBackingStore.Graph.Models.BaseItem, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Analytics about the view activities that took place on this item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.ItemAnalytics? Analytics { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.ItemAnalytics Analytics { get; set; }
#endif
        /// <summary>Audio metadata, if the item is an audio file. Read-only. Read-only. Only on OneDrive Personal.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.Audio? Audio { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.Audio Audio { get; set; }
#endif
        /// <summary>Bundle metadata, if the item is a bundle. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.Bundle? Bundle { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.Bundle Bundle { get; set; }
#endif
        /// <summary>Collection containing Item objects for the immediate children of Item. Only items representing folders have children. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.DriveItem>? Children { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.DriveItem> Children { get; set; }
#endif
        /// <summary>The content stream, if the item represents a file.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public byte[]? Content { get; set; }
#nullable restore
#else
        public byte[] Content { get; set; }
#endif
        /// <summary>An eTag for the content of the item. This eTag isn&apos;t changed if only the metadata is changed. Note This property isn&apos;t returned if the item is a folder. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CTag { get; set; }
#nullable restore
#else
        public string CTag { get; set; }
#endif
        /// <summary>Information about the deleted state of the item. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.Deleted? Deleted { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.Deleted Deleted { get; set; }
#endif
        /// <summary>File metadata, if the item is a file. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.FileObject? File { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.FileObject File { get; set; }
#endif
        /// <summary>File system information on client. Read-write.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.FileSystemInfo? FileSystemInfo { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.FileSystemInfo FileSystemInfo { get; set; }
#endif
        /// <summary>Folder metadata, if the item is a folder. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.Folder? Folder { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.Folder Folder { get; set; }
#endif
        /// <summary>Image metadata, if the item is an image. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.Image? Image { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.Image Image { get; set; }
#endif
        /// <summary>For drives in SharePoint, the associated document library list item. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.ListItem? ListItem { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.ListItem ListItem { get; set; }
#endif
        /// <summary>Location metadata, if the item has location data. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.GeoCoordinates? Location { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.GeoCoordinates Location { get; set; }
#endif
        /// <summary>Malware metadata, if the item was detected to contain malware. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.Malware? Malware { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.Malware Malware { get; set; }
#endif
        /// <summary>If present, indicates that this item is a package instead of a folder or file. Packages are treated like files in some contexts and folders in others. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.Package? Package { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.Package Package { get; set; }
#endif
        /// <summary>If present, indicates that one or more operations that might affect the state of the driveItem are pending completion. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.PendingOperations? PendingOperations { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.PendingOperations PendingOperations { get; set; }
#endif
        /// <summary>The set of permissions for the item. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.Permission>? Permissions { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.Permission> Permissions { get; set; }
#endif
        /// <summary>Photo metadata, if the item is a photo. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.Photo? Photo { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.Photo Photo { get; set; }
#endif
        /// <summary>Provides information about the published or checked-out state of an item, in locations that support such actions. This property isn&apos;t returned by default. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.PublicationFacet? Publication { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.PublicationFacet Publication { get; set; }
#endif
        /// <summary>Remote item data, if the item is shared from a drive other than the one being accessed. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.RemoteItem? RemoteItem { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.RemoteItem RemoteItem { get; set; }
#endif
        /// <summary>Information about retention label and settings enforced on the driveItem. Read-write.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.ItemRetentionLabel? RetentionLabel { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.ItemRetentionLabel RetentionLabel { get; set; }
#endif
        /// <summary>If this property is non-null, it indicates that the driveItem is the top-most driveItem in the drive.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.Root? Root { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.Root Root { get; set; }
#endif
        /// <summary>Search metadata, if the item is from a search result. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.SearchResult? SearchResult { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.SearchResult SearchResult { get; set; }
#endif
        /// <summary>Indicates that the item was shared with others and provides information about the shared state of the item. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.Shared? Shared { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.Shared Shared { get; set; }
#endif
        /// <summary>Returns identifiers useful for SharePoint REST compatibility. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.SharepointIds? SharepointIds { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.SharepointIds SharepointIds { get; set; }
#endif
        /// <summary>Size of the item in bytes. Read-only.</summary>
        public long? Size { get; set; }
        /// <summary>If the current item is also available as a special folder, this facet is returned. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.SpecialFolder? SpecialFolder { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.SpecialFolder SpecialFolder { get; set; }
#endif
        /// <summary>The set of subscriptions on the item. Only supported on the root of a drive.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.Subscription>? Subscriptions { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.Subscription> Subscriptions { get; set; }
#endif
        /// <summary>Collection of thumbnailSet objects associated with the item. For more information, see getting thumbnails. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.ThumbnailSet>? Thumbnails { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.ThumbnailSet> Thumbnails { get; set; }
#endif
        /// <summary>The list of previous versions of the item. For more info, see getting previous versions. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.DriveItemVersion>? Versions { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.DriveItemVersion> Versions { get; set; }
#endif
        /// <summary>Video metadata, if the item is a video. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.Video? Video { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.Video Video { get; set; }
#endif
        /// <summary>WebDAV compatible URL for the item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WebDavUrl { get; set; }
#nullable restore
#else
        public string WebDavUrl { get; set; }
#endif
        /// <summary>For files that are Excel spreadsheets, access to the workbook API to work with the spreadsheet&apos;s contents. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.Workbook? Workbook { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.Workbook Workbook { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::NoBackingStore.Graph.Models.DriveItem"/> and sets the default values.
        /// </summary>
        public DriveItem() : base()
        {
            OdataType = "#microsoft.graph.driveItem";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::NoBackingStore.Graph.Models.DriveItem"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::NoBackingStore.Graph.Models.DriveItem CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::NoBackingStore.Graph.Models.DriveItem();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "analytics", n => { Analytics = n.GetObjectValue<global::NoBackingStore.Graph.Models.ItemAnalytics>(global::NoBackingStore.Graph.Models.ItemAnalytics.CreateFromDiscriminatorValue); } },
                { "audio", n => { Audio = n.GetObjectValue<global::NoBackingStore.Graph.Models.Audio>(global::NoBackingStore.Graph.Models.Audio.CreateFromDiscriminatorValue); } },
                { "bundle", n => { Bundle = n.GetObjectValue<global::NoBackingStore.Graph.Models.Bundle>(global::NoBackingStore.Graph.Models.Bundle.CreateFromDiscriminatorValue); } },
                { "cTag", n => { CTag = n.GetStringValue(); } },
                { "children", n => { Children = n.GetCollectionOfObjectValues<global::NoBackingStore.Graph.Models.DriveItem>(global::NoBackingStore.Graph.Models.DriveItem.CreateFromDiscriminatorValue)?.AsList(); } },
                { "content", n => { Content = n.GetByteArrayValue(); } },
                { "deleted", n => { Deleted = n.GetObjectValue<global::NoBackingStore.Graph.Models.Deleted>(global::NoBackingStore.Graph.Models.Deleted.CreateFromDiscriminatorValue); } },
                { "file", n => { File = n.GetObjectValue<global::NoBackingStore.Graph.Models.FileObject>(global::NoBackingStore.Graph.Models.FileObject.CreateFromDiscriminatorValue); } },
                { "fileSystemInfo", n => { FileSystemInfo = n.GetObjectValue<global::NoBackingStore.Graph.Models.FileSystemInfo>(global::NoBackingStore.Graph.Models.FileSystemInfo.CreateFromDiscriminatorValue); } },
                { "folder", n => { Folder = n.GetObjectValue<global::NoBackingStore.Graph.Models.Folder>(global::NoBackingStore.Graph.Models.Folder.CreateFromDiscriminatorValue); } },
                { "image", n => { Image = n.GetObjectValue<global::NoBackingStore.Graph.Models.Image>(global::NoBackingStore.Graph.Models.Image.CreateFromDiscriminatorValue); } },
                { "listItem", n => { ListItem = n.GetObjectValue<global::NoBackingStore.Graph.Models.ListItem>(global::NoBackingStore.Graph.Models.ListItem.CreateFromDiscriminatorValue); } },
                { "location", n => { Location = n.GetObjectValue<global::NoBackingStore.Graph.Models.GeoCoordinates>(global::NoBackingStore.Graph.Models.GeoCoordinates.CreateFromDiscriminatorValue); } },
                { "malware", n => { Malware = n.GetObjectValue<global::NoBackingStore.Graph.Models.Malware>(global::NoBackingStore.Graph.Models.Malware.CreateFromDiscriminatorValue); } },
                { "package", n => { Package = n.GetObjectValue<global::NoBackingStore.Graph.Models.Package>(global::NoBackingStore.Graph.Models.Package.CreateFromDiscriminatorValue); } },
                { "pendingOperations", n => { PendingOperations = n.GetObjectValue<global::NoBackingStore.Graph.Models.PendingOperations>(global::NoBackingStore.Graph.Models.PendingOperations.CreateFromDiscriminatorValue); } },
                { "permissions", n => { Permissions = n.GetCollectionOfObjectValues<global::NoBackingStore.Graph.Models.Permission>(global::NoBackingStore.Graph.Models.Permission.CreateFromDiscriminatorValue)?.AsList(); } },
                { "photo", n => { Photo = n.GetObjectValue<global::NoBackingStore.Graph.Models.Photo>(global::NoBackingStore.Graph.Models.Photo.CreateFromDiscriminatorValue); } },
                { "publication", n => { Publication = n.GetObjectValue<global::NoBackingStore.Graph.Models.PublicationFacet>(global::NoBackingStore.Graph.Models.PublicationFacet.CreateFromDiscriminatorValue); } },
                { "remoteItem", n => { RemoteItem = n.GetObjectValue<global::NoBackingStore.Graph.Models.RemoteItem>(global::NoBackingStore.Graph.Models.RemoteItem.CreateFromDiscriminatorValue); } },
                { "retentionLabel", n => { RetentionLabel = n.GetObjectValue<global::NoBackingStore.Graph.Models.ItemRetentionLabel>(global::NoBackingStore.Graph.Models.ItemRetentionLabel.CreateFromDiscriminatorValue); } },
                { "root", n => { Root = n.GetObjectValue<global::NoBackingStore.Graph.Models.Root>(global::NoBackingStore.Graph.Models.Root.CreateFromDiscriminatorValue); } },
                { "searchResult", n => { SearchResult = n.GetObjectValue<global::NoBackingStore.Graph.Models.SearchResult>(global::NoBackingStore.Graph.Models.SearchResult.CreateFromDiscriminatorValue); } },
                { "shared", n => { Shared = n.GetObjectValue<global::NoBackingStore.Graph.Models.Shared>(global::NoBackingStore.Graph.Models.Shared.CreateFromDiscriminatorValue); } },
                { "sharepointIds", n => { SharepointIds = n.GetObjectValue<global::NoBackingStore.Graph.Models.SharepointIds>(global::NoBackingStore.Graph.Models.SharepointIds.CreateFromDiscriminatorValue); } },
                { "size", n => { Size = n.GetLongValue(); } },
                { "specialFolder", n => { SpecialFolder = n.GetObjectValue<global::NoBackingStore.Graph.Models.SpecialFolder>(global::NoBackingStore.Graph.Models.SpecialFolder.CreateFromDiscriminatorValue); } },
                { "subscriptions", n => { Subscriptions = n.GetCollectionOfObjectValues<global::NoBackingStore.Graph.Models.Subscription>(global::NoBackingStore.Graph.Models.Subscription.CreateFromDiscriminatorValue)?.AsList(); } },
                { "thumbnails", n => { Thumbnails = n.GetCollectionOfObjectValues<global::NoBackingStore.Graph.Models.ThumbnailSet>(global::NoBackingStore.Graph.Models.ThumbnailSet.CreateFromDiscriminatorValue)?.AsList(); } },
                { "versions", n => { Versions = n.GetCollectionOfObjectValues<global::NoBackingStore.Graph.Models.DriveItemVersion>(global::NoBackingStore.Graph.Models.DriveItemVersion.CreateFromDiscriminatorValue)?.AsList(); } },
                { "video", n => { Video = n.GetObjectValue<global::NoBackingStore.Graph.Models.Video>(global::NoBackingStore.Graph.Models.Video.CreateFromDiscriminatorValue); } },
                { "webDavUrl", n => { WebDavUrl = n.GetStringValue(); } },
                { "workbook", n => { Workbook = n.GetObjectValue<global::NoBackingStore.Graph.Models.Workbook>(global::NoBackingStore.Graph.Models.Workbook.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.ItemAnalytics>("analytics", Analytics);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.Audio>("audio", Audio);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.Bundle>("bundle", Bundle);
            writer.WriteCollectionOfObjectValues<global::NoBackingStore.Graph.Models.DriveItem>("children", Children);
            writer.WriteByteArrayValue("content", Content);
            writer.WriteStringValue("cTag", CTag);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.Deleted>("deleted", Deleted);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.FileObject>("file", File);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.FileSystemInfo>("fileSystemInfo", FileSystemInfo);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.Folder>("folder", Folder);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.Image>("image", Image);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.ListItem>("listItem", ListItem);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.GeoCoordinates>("location", Location);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.Malware>("malware", Malware);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.Package>("package", Package);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.PendingOperations>("pendingOperations", PendingOperations);
            writer.WriteCollectionOfObjectValues<global::NoBackingStore.Graph.Models.Permission>("permissions", Permissions);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.Photo>("photo", Photo);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.PublicationFacet>("publication", Publication);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.RemoteItem>("remoteItem", RemoteItem);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.ItemRetentionLabel>("retentionLabel", RetentionLabel);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.Root>("root", Root);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.SearchResult>("searchResult", SearchResult);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.Shared>("shared", Shared);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.SharepointIds>("sharepointIds", SharepointIds);
            writer.WriteLongValue("size", Size);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.SpecialFolder>("specialFolder", SpecialFolder);
            writer.WriteCollectionOfObjectValues<global::NoBackingStore.Graph.Models.Subscription>("subscriptions", Subscriptions);
            writer.WriteCollectionOfObjectValues<global::NoBackingStore.Graph.Models.ThumbnailSet>("thumbnails", Thumbnails);
            writer.WriteCollectionOfObjectValues<global::NoBackingStore.Graph.Models.DriveItemVersion>("versions", Versions);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.Video>("video", Video);
            writer.WriteStringValue("webDavUrl", WebDavUrl);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.Workbook>("workbook", Workbook);
        }
    }
}
#pragma warning restore CS0618
