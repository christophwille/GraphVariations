// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace NoBackingStore.Graph.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class OnlineMeeting : global::NoBackingStore.Graph.Models.OnlineMeetingBase, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The content stream of the attendee report of a Microsoft Teams live event. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public byte[]? AttendeeReport { get; set; }
#nullable restore
#else
        public byte[] AttendeeReport { get; set; }
#endif
        /// <summary>Settings related to a live event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.BroadcastMeetingSettings? BroadcastSettings { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.BroadcastMeetingSettings BroadcastSettings { get; set; }
#endif
        /// <summary>The meeting creation time in UTC. Read-only.</summary>
        public DateTimeOffset? CreationDateTime { get; set; }
        /// <summary>The meeting end time in UTC. Required when you create an online meeting.</summary>
        public DateTimeOffset? EndDateTime { get; set; }
        /// <summary>The externalId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalId { get; set; }
#nullable restore
#else
        public string ExternalId { get; set; }
#endif
        /// <summary>Indicates whether this meeting is a Teams live event.</summary>
        public bool? IsBroadcast { get; set; }
        /// <summary>The ID of the meeting template.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MeetingTemplateId { get; set; }
#nullable restore
#else
        public string MeetingTemplateId { get; set; }
#endif
        /// <summary>The participants associated with the online meeting, including the organizer and the attendees.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.MeetingParticipants? Participants { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.MeetingParticipants Participants { get; set; }
#endif
        /// <summary>The recordings of an online meeting. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.CallRecording>? Recordings { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.CallRecording> Recordings { get; set; }
#endif
        /// <summary>The meeting start time in UTC.</summary>
        public DateTimeOffset? StartDateTime { get; set; }
        /// <summary>The transcripts of an online meeting. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.CallTranscript>? Transcripts { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.CallTranscript> Transcripts { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::NoBackingStore.Graph.Models.OnlineMeeting"/> and sets the default values.
        /// </summary>
        public OnlineMeeting() : base()
        {
            OdataType = "#microsoft.graph.onlineMeeting";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::NoBackingStore.Graph.Models.OnlineMeeting"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::NoBackingStore.Graph.Models.OnlineMeeting CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::NoBackingStore.Graph.Models.OnlineMeeting();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "attendeeReport", n => { AttendeeReport = n.GetByteArrayValue(); } },
                { "broadcastSettings", n => { BroadcastSettings = n.GetObjectValue<global::NoBackingStore.Graph.Models.BroadcastMeetingSettings>(global::NoBackingStore.Graph.Models.BroadcastMeetingSettings.CreateFromDiscriminatorValue); } },
                { "creationDateTime", n => { CreationDateTime = n.GetDateTimeOffsetValue(); } },
                { "endDateTime", n => { EndDateTime = n.GetDateTimeOffsetValue(); } },
                { "externalId", n => { ExternalId = n.GetStringValue(); } },
                { "isBroadcast", n => { IsBroadcast = n.GetBoolValue(); } },
                { "meetingTemplateId", n => { MeetingTemplateId = n.GetStringValue(); } },
                { "participants", n => { Participants = n.GetObjectValue<global::NoBackingStore.Graph.Models.MeetingParticipants>(global::NoBackingStore.Graph.Models.MeetingParticipants.CreateFromDiscriminatorValue); } },
                { "recordings", n => { Recordings = n.GetCollectionOfObjectValues<global::NoBackingStore.Graph.Models.CallRecording>(global::NoBackingStore.Graph.Models.CallRecording.CreateFromDiscriminatorValue)?.AsList(); } },
                { "startDateTime", n => { StartDateTime = n.GetDateTimeOffsetValue(); } },
                { "transcripts", n => { Transcripts = n.GetCollectionOfObjectValues<global::NoBackingStore.Graph.Models.CallTranscript>(global::NoBackingStore.Graph.Models.CallTranscript.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteByteArrayValue("attendeeReport", AttendeeReport);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.BroadcastMeetingSettings>("broadcastSettings", BroadcastSettings);
            writer.WriteDateTimeOffsetValue("creationDateTime", CreationDateTime);
            writer.WriteDateTimeOffsetValue("endDateTime", EndDateTime);
            writer.WriteStringValue("externalId", ExternalId);
            writer.WriteBoolValue("isBroadcast", IsBroadcast);
            writer.WriteStringValue("meetingTemplateId", MeetingTemplateId);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.MeetingParticipants>("participants", Participants);
            writer.WriteCollectionOfObjectValues<global::NoBackingStore.Graph.Models.CallRecording>("recordings", Recordings);
            writer.WriteDateTimeOffsetValue("startDateTime", StartDateTime);
            writer.WriteCollectionOfObjectValues<global::NoBackingStore.Graph.Models.CallTranscript>("transcripts", Transcripts);
        }
    }
}
#pragma warning restore CS0618
