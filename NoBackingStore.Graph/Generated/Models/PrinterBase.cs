// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace NoBackingStore.Graph.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PrinterBase : global::NoBackingStore.Graph.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The capabilities of the printer/printerShare.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.PrinterCapabilities? Capabilities { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.PrinterCapabilities Capabilities { get; set; }
#endif
        /// <summary>The default print settings of printer/printerShare.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.PrinterDefaults? Defaults { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.PrinterDefaults Defaults { get; set; }
#endif
        /// <summary>The name of the printer/printerShare.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>Specifies whether the printer/printerShare is currently accepting new print jobs.</summary>
        public bool? IsAcceptingJobs { get; set; }
        /// <summary>The list of jobs that are queued for printing by the printer/printerShare.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.PrintJob>? Jobs { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.PrintJob> Jobs { get; set; }
#endif
        /// <summary>The physical and/or organizational location of the printer/printerShare.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.PrinterLocation? Location { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.PrinterLocation Location { get; set; }
#endif
        /// <summary>The manufacturer of the printer/printerShare.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Manufacturer { get; set; }
#nullable restore
#else
        public string Manufacturer { get; set; }
#endif
        /// <summary>The model name of the printer/printerShare.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Model { get; set; }
#nullable restore
#else
        public string Model { get; set; }
#endif
        /// <summary>The status property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.PrinterStatus? Status { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.PrinterStatus Status { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::NoBackingStore.Graph.Models.PrinterBase"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::NoBackingStore.Graph.Models.PrinterBase CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("@odata.type")?.GetStringValue();
            return mappingValue switch
            {
                "#microsoft.graph.printer" => new global::NoBackingStore.Graph.Models.Printer(),
                "#microsoft.graph.printerShare" => new global::NoBackingStore.Graph.Models.PrinterShare(),
                _ => new global::NoBackingStore.Graph.Models.PrinterBase(),
            };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "capabilities", n => { Capabilities = n.GetObjectValue<global::NoBackingStore.Graph.Models.PrinterCapabilities>(global::NoBackingStore.Graph.Models.PrinterCapabilities.CreateFromDiscriminatorValue); } },
                { "defaults", n => { Defaults = n.GetObjectValue<global::NoBackingStore.Graph.Models.PrinterDefaults>(global::NoBackingStore.Graph.Models.PrinterDefaults.CreateFromDiscriminatorValue); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "isAcceptingJobs", n => { IsAcceptingJobs = n.GetBoolValue(); } },
                { "jobs", n => { Jobs = n.GetCollectionOfObjectValues<global::NoBackingStore.Graph.Models.PrintJob>(global::NoBackingStore.Graph.Models.PrintJob.CreateFromDiscriminatorValue)?.AsList(); } },
                { "location", n => { Location = n.GetObjectValue<global::NoBackingStore.Graph.Models.PrinterLocation>(global::NoBackingStore.Graph.Models.PrinterLocation.CreateFromDiscriminatorValue); } },
                { "manufacturer", n => { Manufacturer = n.GetStringValue(); } },
                { "model", n => { Model = n.GetStringValue(); } },
                { "status", n => { Status = n.GetObjectValue<global::NoBackingStore.Graph.Models.PrinterStatus>(global::NoBackingStore.Graph.Models.PrinterStatus.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.PrinterCapabilities>("capabilities", Capabilities);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.PrinterDefaults>("defaults", Defaults);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteBoolValue("isAcceptingJobs", IsAcceptingJobs);
            writer.WriteCollectionOfObjectValues<global::NoBackingStore.Graph.Models.PrintJob>("jobs", Jobs);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.PrinterLocation>("location", Location);
            writer.WriteStringValue("manufacturer", Manufacturer);
            writer.WriteStringValue("model", Model);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.PrinterStatus>("status", Status);
        }
    }
}
#pragma warning restore CS0618
