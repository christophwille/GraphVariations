// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace NoBackingStore.Graph.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ConditionalAccessConditionSet : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Applications and user actions included in and excluded from the policy. Required.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.ConditionalAccessApplications? Applications { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.ConditionalAccessApplications Applications { get; set; }
#endif
        /// <summary>Authentication flows included in the policy scope.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.ConditionalAccessAuthenticationFlows? AuthenticationFlows { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.ConditionalAccessAuthenticationFlows AuthenticationFlows { get; set; }
#endif
        /// <summary>Client applications (service principals and workload identities) included in and excluded from the policy. Either users or clientApplications is required.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.ConditionalAccessClientApplications? ClientApplications { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.ConditionalAccessClientApplications ClientApplications { get; set; }
#endif
        /// <summary>Client application types included in the policy. Possible values are: all, browser, mobileAppsAndDesktopClients, exchangeActiveSync, easSupported, other. Required.  The easUnsupported enumeration member will be deprecated in favor of exchangeActiveSync, which includes EAS supported and unsupported platforms.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.ConditionalAccessClientApp?>? ClientAppTypes { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.ConditionalAccessClientApp?> ClientAppTypes { get; set; }
#endif
        /// <summary>Devices in the policy.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.ConditionalAccessDevices? Devices { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.ConditionalAccessDevices Devices { get; set; }
#endif
        /// <summary>Insider risk levels included in the policy. The possible values are: minor, moderate, elevated, unknownFutureValue.</summary>
        public global::NoBackingStore.Graph.Models.ConditionalAccessInsiderRiskLevels? InsiderRiskLevels { get; set; }
        /// <summary>Locations included in and excluded from the policy.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.ConditionalAccessLocations? Locations { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.ConditionalAccessLocations Locations { get; set; }
#endif
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType { get; set; }
#nullable restore
#else
        public string OdataType { get; set; }
#endif
        /// <summary>Platforms included in and excluded from the policy.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.ConditionalAccessPlatforms? Platforms { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.ConditionalAccessPlatforms Platforms { get; set; }
#endif
        /// <summary>Service principal risk levels included in the policy. Possible values are: low, medium, high, none, unknownFutureValue.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.RiskLevel?>? ServicePrincipalRiskLevels { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.RiskLevel?> ServicePrincipalRiskLevels { get; set; }
#endif
        /// <summary>Sign-in risk levels included in the policy. Possible values are: low, medium, high, hidden, none, unknownFutureValue. Required.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.RiskLevel?>? SignInRiskLevels { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.RiskLevel?> SignInRiskLevels { get; set; }
#endif
        /// <summary>User risk levels included in the policy. Possible values are: low, medium, high, hidden, none, unknownFutureValue. Required.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.RiskLevel?>? UserRiskLevels { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.RiskLevel?> UserRiskLevels { get; set; }
#endif
        /// <summary>Users, groups, and roles included in and excluded from the policy. Either users or clientApplications is required.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.ConditionalAccessUsers? Users { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.ConditionalAccessUsers Users { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::NoBackingStore.Graph.Models.ConditionalAccessConditionSet"/> and sets the default values.
        /// </summary>
        public ConditionalAccessConditionSet()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::NoBackingStore.Graph.Models.ConditionalAccessConditionSet"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::NoBackingStore.Graph.Models.ConditionalAccessConditionSet CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::NoBackingStore.Graph.Models.ConditionalAccessConditionSet();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "applications", n => { Applications = n.GetObjectValue<global::NoBackingStore.Graph.Models.ConditionalAccessApplications>(global::NoBackingStore.Graph.Models.ConditionalAccessApplications.CreateFromDiscriminatorValue); } },
                { "authenticationFlows", n => { AuthenticationFlows = n.GetObjectValue<global::NoBackingStore.Graph.Models.ConditionalAccessAuthenticationFlows>(global::NoBackingStore.Graph.Models.ConditionalAccessAuthenticationFlows.CreateFromDiscriminatorValue); } },
                { "clientAppTypes", n => { ClientAppTypes = n.GetCollectionOfEnumValues<global::NoBackingStore.Graph.Models.ConditionalAccessClientApp>()?.AsList(); } },
                { "clientApplications", n => { ClientApplications = n.GetObjectValue<global::NoBackingStore.Graph.Models.ConditionalAccessClientApplications>(global::NoBackingStore.Graph.Models.ConditionalAccessClientApplications.CreateFromDiscriminatorValue); } },
                { "devices", n => { Devices = n.GetObjectValue<global::NoBackingStore.Graph.Models.ConditionalAccessDevices>(global::NoBackingStore.Graph.Models.ConditionalAccessDevices.CreateFromDiscriminatorValue); } },
                { "insiderRiskLevels", n => { InsiderRiskLevels = n.GetEnumValue<global::NoBackingStore.Graph.Models.ConditionalAccessInsiderRiskLevels>(); } },
                { "locations", n => { Locations = n.GetObjectValue<global::NoBackingStore.Graph.Models.ConditionalAccessLocations>(global::NoBackingStore.Graph.Models.ConditionalAccessLocations.CreateFromDiscriminatorValue); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
                { "platforms", n => { Platforms = n.GetObjectValue<global::NoBackingStore.Graph.Models.ConditionalAccessPlatforms>(global::NoBackingStore.Graph.Models.ConditionalAccessPlatforms.CreateFromDiscriminatorValue); } },
                { "servicePrincipalRiskLevels", n => { ServicePrincipalRiskLevels = n.GetCollectionOfEnumValues<global::NoBackingStore.Graph.Models.RiskLevel>()?.AsList(); } },
                { "signInRiskLevels", n => { SignInRiskLevels = n.GetCollectionOfEnumValues<global::NoBackingStore.Graph.Models.RiskLevel>()?.AsList(); } },
                { "userRiskLevels", n => { UserRiskLevels = n.GetCollectionOfEnumValues<global::NoBackingStore.Graph.Models.RiskLevel>()?.AsList(); } },
                { "users", n => { Users = n.GetObjectValue<global::NoBackingStore.Graph.Models.ConditionalAccessUsers>(global::NoBackingStore.Graph.Models.ConditionalAccessUsers.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.ConditionalAccessApplications>("applications", Applications);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.ConditionalAccessAuthenticationFlows>("authenticationFlows", AuthenticationFlows);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.ConditionalAccessClientApplications>("clientApplications", ClientApplications);
            writer.WriteCollectionOfEnumValues<global::NoBackingStore.Graph.Models.ConditionalAccessClientApp>("clientAppTypes", ClientAppTypes);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.ConditionalAccessDevices>("devices", Devices);
            writer.WriteEnumValue<global::NoBackingStore.Graph.Models.ConditionalAccessInsiderRiskLevels>("insiderRiskLevels", InsiderRiskLevels);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.ConditionalAccessLocations>("locations", Locations);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.ConditionalAccessPlatforms>("platforms", Platforms);
            writer.WriteCollectionOfEnumValues<global::NoBackingStore.Graph.Models.RiskLevel>("servicePrincipalRiskLevels", ServicePrincipalRiskLevels);
            writer.WriteCollectionOfEnumValues<global::NoBackingStore.Graph.Models.RiskLevel>("signInRiskLevels", SignInRiskLevels);
            writer.WriteCollectionOfEnumValues<global::NoBackingStore.Graph.Models.RiskLevel>("userRiskLevels", UserRiskLevels);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.ConditionalAccessUsers>("users", Users);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
