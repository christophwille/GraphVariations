// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace NoBackingStore.Graph.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Schedule : global::NoBackingStore.Graph.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Indicates whether the schedule is enabled for the team. Required.</summary>
        public bool? Enabled { get; set; }
        /// <summary>The offer requests for shifts in the schedule.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.OfferShiftRequest>? OfferShiftRequests { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.OfferShiftRequest> OfferShiftRequests { get; set; }
#endif
        /// <summary>Indicates whether offer shift requests are enabled for the schedule.</summary>
        public bool? OfferShiftRequestsEnabled { get; set; }
        /// <summary>The open shift requests in the schedule.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.OpenShiftChangeRequest>? OpenShiftChangeRequests { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.OpenShiftChangeRequest> OpenShiftChangeRequests { get; set; }
#endif
        /// <summary>The set of open shifts in a scheduling group in the schedule.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.OpenShift>? OpenShifts { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.OpenShift> OpenShifts { get; set; }
#endif
        /// <summary>Indicates whether open shifts are enabled for the schedule.</summary>
        public bool? OpenShiftsEnabled { get; set; }
        /// <summary>The status of the schedule provisioning. The possible values are notStarted, running, completed, failed.</summary>
        public global::NoBackingStore.Graph.Models.OperationStatus? ProvisionStatus { get; private set; }
        /// <summary>Additional information about why schedule provisioning failed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProvisionStatusCode { get; private set; }
#nullable restore
#else
        public string ProvisionStatusCode { get; private set; }
#endif
        /// <summary>The logical grouping of users in the schedule (usually by role).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.SchedulingGroup>? SchedulingGroups { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.SchedulingGroup> SchedulingGroups { get; set; }
#endif
        /// <summary>The shifts in the schedule.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.Shift>? Shifts { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.Shift> Shifts { get; set; }
#endif
        /// <summary>The swap requests for shifts in the schedule.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.SwapShiftsChangeRequest>? SwapShiftsChangeRequests { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.SwapShiftsChangeRequest> SwapShiftsChangeRequests { get; set; }
#endif
        /// <summary>Indicates whether swap shifts requests are enabled for the schedule.</summary>
        public bool? SwapShiftsRequestsEnabled { get; set; }
        /// <summary>Indicates whether time clock is enabled for the schedule.</summary>
        public bool? TimeClockEnabled { get; set; }
        /// <summary>The set of reasons for a time off in the schedule.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.TimeOffReason>? TimeOffReasons { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.TimeOffReason> TimeOffReasons { get; set; }
#endif
        /// <summary>The time off requests in the schedule.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.TimeOffRequest>? TimeOffRequests { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.TimeOffRequest> TimeOffRequests { get; set; }
#endif
        /// <summary>Indicates whether time off requests are enabled for the schedule.</summary>
        public bool? TimeOffRequestsEnabled { get; set; }
        /// <summary>The instances of times off in the schedule.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.TimeOff>? TimesOff { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.TimeOff> TimesOff { get; set; }
#endif
        /// <summary>Indicates the time zone of the schedule team using tz database format. Required.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TimeZone { get; set; }
#nullable restore
#else
        public string TimeZone { get; set; }
#endif
        /// <summary>The IDs for the workforce integrations associated with this schedule.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? WorkforceIntegrationIds { get; set; }
#nullable restore
#else
        public List<string> WorkforceIntegrationIds { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::NoBackingStore.Graph.Models.Schedule"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::NoBackingStore.Graph.Models.Schedule CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::NoBackingStore.Graph.Models.Schedule();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "enabled", n => { Enabled = n.GetBoolValue(); } },
                { "offerShiftRequests", n => { OfferShiftRequests = n.GetCollectionOfObjectValues<global::NoBackingStore.Graph.Models.OfferShiftRequest>(global::NoBackingStore.Graph.Models.OfferShiftRequest.CreateFromDiscriminatorValue)?.AsList(); } },
                { "offerShiftRequestsEnabled", n => { OfferShiftRequestsEnabled = n.GetBoolValue(); } },
                { "openShiftChangeRequests", n => { OpenShiftChangeRequests = n.GetCollectionOfObjectValues<global::NoBackingStore.Graph.Models.OpenShiftChangeRequest>(global::NoBackingStore.Graph.Models.OpenShiftChangeRequest.CreateFromDiscriminatorValue)?.AsList(); } },
                { "openShifts", n => { OpenShifts = n.GetCollectionOfObjectValues<global::NoBackingStore.Graph.Models.OpenShift>(global::NoBackingStore.Graph.Models.OpenShift.CreateFromDiscriminatorValue)?.AsList(); } },
                { "openShiftsEnabled", n => { OpenShiftsEnabled = n.GetBoolValue(); } },
                { "provisionStatus", n => { ProvisionStatus = n.GetEnumValue<global::NoBackingStore.Graph.Models.OperationStatus>(); } },
                { "provisionStatusCode", n => { ProvisionStatusCode = n.GetStringValue(); } },
                { "schedulingGroups", n => { SchedulingGroups = n.GetCollectionOfObjectValues<global::NoBackingStore.Graph.Models.SchedulingGroup>(global::NoBackingStore.Graph.Models.SchedulingGroup.CreateFromDiscriminatorValue)?.AsList(); } },
                { "shifts", n => { Shifts = n.GetCollectionOfObjectValues<global::NoBackingStore.Graph.Models.Shift>(global::NoBackingStore.Graph.Models.Shift.CreateFromDiscriminatorValue)?.AsList(); } },
                { "swapShiftsChangeRequests", n => { SwapShiftsChangeRequests = n.GetCollectionOfObjectValues<global::NoBackingStore.Graph.Models.SwapShiftsChangeRequest>(global::NoBackingStore.Graph.Models.SwapShiftsChangeRequest.CreateFromDiscriminatorValue)?.AsList(); } },
                { "swapShiftsRequestsEnabled", n => { SwapShiftsRequestsEnabled = n.GetBoolValue(); } },
                { "timeClockEnabled", n => { TimeClockEnabled = n.GetBoolValue(); } },
                { "timeOffReasons", n => { TimeOffReasons = n.GetCollectionOfObjectValues<global::NoBackingStore.Graph.Models.TimeOffReason>(global::NoBackingStore.Graph.Models.TimeOffReason.CreateFromDiscriminatorValue)?.AsList(); } },
                { "timeOffRequests", n => { TimeOffRequests = n.GetCollectionOfObjectValues<global::NoBackingStore.Graph.Models.TimeOffRequest>(global::NoBackingStore.Graph.Models.TimeOffRequest.CreateFromDiscriminatorValue)?.AsList(); } },
                { "timeOffRequestsEnabled", n => { TimeOffRequestsEnabled = n.GetBoolValue(); } },
                { "timeZone", n => { TimeZone = n.GetStringValue(); } },
                { "timesOff", n => { TimesOff = n.GetCollectionOfObjectValues<global::NoBackingStore.Graph.Models.TimeOff>(global::NoBackingStore.Graph.Models.TimeOff.CreateFromDiscriminatorValue)?.AsList(); } },
                { "workforceIntegrationIds", n => { WorkforceIntegrationIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteCollectionOfObjectValues<global::NoBackingStore.Graph.Models.OfferShiftRequest>("offerShiftRequests", OfferShiftRequests);
            writer.WriteBoolValue("offerShiftRequestsEnabled", OfferShiftRequestsEnabled);
            writer.WriteCollectionOfObjectValues<global::NoBackingStore.Graph.Models.OpenShiftChangeRequest>("openShiftChangeRequests", OpenShiftChangeRequests);
            writer.WriteCollectionOfObjectValues<global::NoBackingStore.Graph.Models.OpenShift>("openShifts", OpenShifts);
            writer.WriteBoolValue("openShiftsEnabled", OpenShiftsEnabled);
            writer.WriteCollectionOfObjectValues<global::NoBackingStore.Graph.Models.SchedulingGroup>("schedulingGroups", SchedulingGroups);
            writer.WriteCollectionOfObjectValues<global::NoBackingStore.Graph.Models.Shift>("shifts", Shifts);
            writer.WriteCollectionOfObjectValues<global::NoBackingStore.Graph.Models.SwapShiftsChangeRequest>("swapShiftsChangeRequests", SwapShiftsChangeRequests);
            writer.WriteBoolValue("swapShiftsRequestsEnabled", SwapShiftsRequestsEnabled);
            writer.WriteBoolValue("timeClockEnabled", TimeClockEnabled);
            writer.WriteCollectionOfObjectValues<global::NoBackingStore.Graph.Models.TimeOffReason>("timeOffReasons", TimeOffReasons);
            writer.WriteCollectionOfObjectValues<global::NoBackingStore.Graph.Models.TimeOffRequest>("timeOffRequests", TimeOffRequests);
            writer.WriteBoolValue("timeOffRequestsEnabled", TimeOffRequestsEnabled);
            writer.WriteCollectionOfObjectValues<global::NoBackingStore.Graph.Models.TimeOff>("timesOff", TimesOff);
            writer.WriteStringValue("timeZone", TimeZone);
            writer.WriteCollectionOfPrimitiveValues<string>("workforceIntegrationIds", WorkforceIntegrationIds);
        }
    }
}
#pragma warning restore CS0618
