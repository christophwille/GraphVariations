// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace NoBackingStore.Graph.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Call : global::NoBackingStore.Graph.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The audioRoutingGroups property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.AudioRoutingGroup>? AudioRoutingGroups { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.AudioRoutingGroup> AudioRoutingGroups { get; set; }
#endif
        /// <summary>The callback URL on which callbacks are delivered. Must be an HTTPS URL.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CallbackUri { get; set; }
#nullable restore
#else
        public string CallbackUri { get; set; }
#endif
        /// <summary>A unique identifier for all the participant calls in a conference or a unique identifier for two participant calls in a P2P call.  This identifier must be copied over from Microsoft.Graph.Call.CallChainId.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CallChainId { get; set; }
#nullable restore
#else
        public string CallChainId { get; set; }
#endif
        /// <summary>Contains the optional features for the call.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.CallOptions? CallOptions { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.CallOptions CallOptions { get; set; }
#endif
        /// <summary>The routing information on how the call was retargeted. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.CallRoute>? CallRoutes { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.CallRoute> CallRoutes { get; set; }
#endif
        /// <summary>The chat information. Required information for joining a meeting.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.ChatInfo? ChatInfo { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.ChatInfo ChatInfo { get; set; }
#endif
        /// <summary>The contentSharingSessions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.ContentSharingSession>? ContentSharingSessions { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.ContentSharingSession> ContentSharingSessions { get; set; }
#endif
        /// <summary>The direction of the call. The possible values are incoming or outgoing. Read-only.</summary>
        public global::NoBackingStore.Graph.Models.CallDirection? Direction { get; set; }
        /// <summary>Call context associated with an incoming call.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.IncomingContext? IncomingContext { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.IncomingContext IncomingContext { get; set; }
#endif
        /// <summary>The media configuration. Required.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.MediaConfig? MediaConfig { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.MediaConfig MediaConfig { get; set; }
#endif
        /// <summary>Read-only. The call media state.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.CallMediaState? MediaState { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.CallMediaState MediaState { get; set; }
#endif
        /// <summary>The meeting information. Required information for meeting scenarios.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.MeetingInfo? MeetingInfo { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.MeetingInfo MeetingInfo { get; set; }
#endif
        /// <summary>The myParticipantId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MyParticipantId { get; set; }
#nullable restore
#else
        public string MyParticipantId { get; set; }
#endif
        /// <summary>The operations property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.CommsOperation>? Operations { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.CommsOperation> Operations { get; set; }
#endif
        /// <summary>The participants property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.Participant>? Participants { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.Participant> Participants { get; set; }
#endif
        /// <summary>The list of requested modalities. Possible values are: unknown, audio, video, videoBasedScreenSharing, data.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.Modality?>? RequestedModalities { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.Modality?> RequestedModalities { get; set; }
#endif
        /// <summary>The result information. For example, the result can hold termination reason. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.ResultInfo? ResultInfo { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.ResultInfo ResultInfo { get; set; }
#endif
        /// <summary>The originator of the call.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.ParticipantInfo? Source { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.ParticipantInfo Source { get; set; }
#endif
        /// <summary>The call state. Possible values are: incoming, establishing, ringing, established, hold, transferring, transferAccepted, redirecting, terminating, terminated. Read-only.</summary>
        public global::NoBackingStore.Graph.Models.CallState? State { get; set; }
        /// <summary>The subject of the conversation.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Subject { get; set; }
#nullable restore
#else
        public string Subject { get; set; }
#endif
        /// <summary>The targets of the call. Required information for creating peer to peer call.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.InvitationParticipantInfo>? Targets { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.InvitationParticipantInfo> Targets { get; set; }
#endif
        /// <summary>The tenantId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TenantId { get; set; }
#nullable restore
#else
        public string TenantId { get; set; }
#endif
        /// <summary>The toneInfo property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.ToneInfo? ToneInfo { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.ToneInfo ToneInfo { get; set; }
#endif
        /// <summary>The transcription information for the call. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.CallTranscriptionInfo? Transcription { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.CallTranscriptionInfo Transcription { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::NoBackingStore.Graph.Models.Call"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::NoBackingStore.Graph.Models.Call CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::NoBackingStore.Graph.Models.Call();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "audioRoutingGroups", n => { AudioRoutingGroups = n.GetCollectionOfObjectValues<global::NoBackingStore.Graph.Models.AudioRoutingGroup>(global::NoBackingStore.Graph.Models.AudioRoutingGroup.CreateFromDiscriminatorValue)?.AsList(); } },
                { "callChainId", n => { CallChainId = n.GetStringValue(); } },
                { "callOptions", n => { CallOptions = n.GetObjectValue<global::NoBackingStore.Graph.Models.CallOptions>(global::NoBackingStore.Graph.Models.CallOptions.CreateFromDiscriminatorValue); } },
                { "callRoutes", n => { CallRoutes = n.GetCollectionOfObjectValues<global::NoBackingStore.Graph.Models.CallRoute>(global::NoBackingStore.Graph.Models.CallRoute.CreateFromDiscriminatorValue)?.AsList(); } },
                { "callbackUri", n => { CallbackUri = n.GetStringValue(); } },
                { "chatInfo", n => { ChatInfo = n.GetObjectValue<global::NoBackingStore.Graph.Models.ChatInfo>(global::NoBackingStore.Graph.Models.ChatInfo.CreateFromDiscriminatorValue); } },
                { "contentSharingSessions", n => { ContentSharingSessions = n.GetCollectionOfObjectValues<global::NoBackingStore.Graph.Models.ContentSharingSession>(global::NoBackingStore.Graph.Models.ContentSharingSession.CreateFromDiscriminatorValue)?.AsList(); } },
                { "direction", n => { Direction = n.GetEnumValue<global::NoBackingStore.Graph.Models.CallDirection>(); } },
                { "incomingContext", n => { IncomingContext = n.GetObjectValue<global::NoBackingStore.Graph.Models.IncomingContext>(global::NoBackingStore.Graph.Models.IncomingContext.CreateFromDiscriminatorValue); } },
                { "mediaConfig", n => { MediaConfig = n.GetObjectValue<global::NoBackingStore.Graph.Models.MediaConfig>(global::NoBackingStore.Graph.Models.MediaConfig.CreateFromDiscriminatorValue); } },
                { "mediaState", n => { MediaState = n.GetObjectValue<global::NoBackingStore.Graph.Models.CallMediaState>(global::NoBackingStore.Graph.Models.CallMediaState.CreateFromDiscriminatorValue); } },
                { "meetingInfo", n => { MeetingInfo = n.GetObjectValue<global::NoBackingStore.Graph.Models.MeetingInfo>(global::NoBackingStore.Graph.Models.MeetingInfo.CreateFromDiscriminatorValue); } },
                { "myParticipantId", n => { MyParticipantId = n.GetStringValue(); } },
                { "operations", n => { Operations = n.GetCollectionOfObjectValues<global::NoBackingStore.Graph.Models.CommsOperation>(global::NoBackingStore.Graph.Models.CommsOperation.CreateFromDiscriminatorValue)?.AsList(); } },
                { "participants", n => { Participants = n.GetCollectionOfObjectValues<global::NoBackingStore.Graph.Models.Participant>(global::NoBackingStore.Graph.Models.Participant.CreateFromDiscriminatorValue)?.AsList(); } },
                { "requestedModalities", n => { RequestedModalities = n.GetCollectionOfEnumValues<global::NoBackingStore.Graph.Models.Modality>()?.AsList(); } },
                { "resultInfo", n => { ResultInfo = n.GetObjectValue<global::NoBackingStore.Graph.Models.ResultInfo>(global::NoBackingStore.Graph.Models.ResultInfo.CreateFromDiscriminatorValue); } },
                { "source", n => { Source = n.GetObjectValue<global::NoBackingStore.Graph.Models.ParticipantInfo>(global::NoBackingStore.Graph.Models.ParticipantInfo.CreateFromDiscriminatorValue); } },
                { "state", n => { State = n.GetEnumValue<global::NoBackingStore.Graph.Models.CallState>(); } },
                { "subject", n => { Subject = n.GetStringValue(); } },
                { "targets", n => { Targets = n.GetCollectionOfObjectValues<global::NoBackingStore.Graph.Models.InvitationParticipantInfo>(global::NoBackingStore.Graph.Models.InvitationParticipantInfo.CreateFromDiscriminatorValue)?.AsList(); } },
                { "tenantId", n => { TenantId = n.GetStringValue(); } },
                { "toneInfo", n => { ToneInfo = n.GetObjectValue<global::NoBackingStore.Graph.Models.ToneInfo>(global::NoBackingStore.Graph.Models.ToneInfo.CreateFromDiscriminatorValue); } },
                { "transcription", n => { Transcription = n.GetObjectValue<global::NoBackingStore.Graph.Models.CallTranscriptionInfo>(global::NoBackingStore.Graph.Models.CallTranscriptionInfo.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfObjectValues<global::NoBackingStore.Graph.Models.AudioRoutingGroup>("audioRoutingGroups", AudioRoutingGroups);
            writer.WriteStringValue("callbackUri", CallbackUri);
            writer.WriteStringValue("callChainId", CallChainId);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.CallOptions>("callOptions", CallOptions);
            writer.WriteCollectionOfObjectValues<global::NoBackingStore.Graph.Models.CallRoute>("callRoutes", CallRoutes);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.ChatInfo>("chatInfo", ChatInfo);
            writer.WriteCollectionOfObjectValues<global::NoBackingStore.Graph.Models.ContentSharingSession>("contentSharingSessions", ContentSharingSessions);
            writer.WriteEnumValue<global::NoBackingStore.Graph.Models.CallDirection>("direction", Direction);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.IncomingContext>("incomingContext", IncomingContext);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.MediaConfig>("mediaConfig", MediaConfig);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.CallMediaState>("mediaState", MediaState);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.MeetingInfo>("meetingInfo", MeetingInfo);
            writer.WriteStringValue("myParticipantId", MyParticipantId);
            writer.WriteCollectionOfObjectValues<global::NoBackingStore.Graph.Models.CommsOperation>("operations", Operations);
            writer.WriteCollectionOfObjectValues<global::NoBackingStore.Graph.Models.Participant>("participants", Participants);
            writer.WriteCollectionOfEnumValues<global::NoBackingStore.Graph.Models.Modality>("requestedModalities", RequestedModalities);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.ResultInfo>("resultInfo", ResultInfo);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.ParticipantInfo>("source", Source);
            writer.WriteEnumValue<global::NoBackingStore.Graph.Models.CallState>("state", State);
            writer.WriteStringValue("subject", Subject);
            writer.WriteCollectionOfObjectValues<global::NoBackingStore.Graph.Models.InvitationParticipantInfo>("targets", Targets);
            writer.WriteStringValue("tenantId", TenantId);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.ToneInfo>("toneInfo", ToneInfo);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.CallTranscriptionInfo>("transcription", Transcription);
        }
    }
}
#pragma warning restore CS0618
