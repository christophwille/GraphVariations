// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace NoBackingStore.Graph.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ContentType : global::NoBackingStore.Graph.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>List of canonical URLs for hub sites with which this content type is associated to. This will contain all hub sites where this content type is queued to be enforced or is already enforced. Enforcing a content type means that the content type is applied to the lists in the enforced sites.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AssociatedHubsUrls { get; set; }
#nullable restore
#else
        public List<string> AssociatedHubsUrls { get; set; }
#endif
        /// <summary>Parent contentType from which this content type is derived.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.ContentType? Base { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.ContentType Base { get; set; }
#endif
        /// <summary>The collection of content types that are ancestors of this content type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.ContentType>? BaseTypes { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.ContentType> BaseTypes { get; set; }
#endif
        /// <summary>The collection of columns that are required by this content type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.ColumnLink>? ColumnLinks { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.ColumnLink> ColumnLinks { get; set; }
#endif
        /// <summary>Column order information in a content type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.ColumnDefinition>? ColumnPositions { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.ColumnDefinition> ColumnPositions { get; set; }
#endif
        /// <summary>The collection of column definitions for this content type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.ColumnDefinition>? Columns { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.ColumnDefinition> Columns { get; set; }
#endif
        /// <summary>The descriptive text for the item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Document Set metadata.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.DocumentSet? DocumentSet { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.DocumentSet DocumentSet { get; set; }
#endif
        /// <summary>Document template metadata. To make sure that documents have consistent content across a site and its subsites, you can associate a Word, Excel, or PowerPoint template with a site content type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.DocumentSetContent? DocumentTemplate { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.DocumentSetContent DocumentTemplate { get; set; }
#endif
        /// <summary>The name of the group this content type belongs to. Helps organize related content types.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Group { get; set; }
#nullable restore
#else
        public string Group { get; set; }
#endif
        /// <summary>Indicates whether the content type is hidden in the list&apos;s &apos;New&apos; menu.</summary>
        public bool? Hidden { get; set; }
        /// <summary>If this content type is inherited from another scope (like a site), provides a reference to the item where the content type is defined.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.ItemReference? InheritedFrom { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.ItemReference InheritedFrom { get; set; }
#endif
        /// <summary>Specifies if a content type is a built-in content type.</summary>
        public bool? IsBuiltIn { get; set; }
        /// <summary>The name of the content type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Specifies the order in which the content type appears in the selection UI.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.ContentTypeOrder? Order { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.ContentTypeOrder Order { get; set; }
#endif
        /// <summary>The unique identifier of the content type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ParentId { get; set; }
#nullable restore
#else
        public string ParentId { get; set; }
#endif
        /// <summary>If true, any changes made to the content type are pushed to inherited content types and lists that implement the content type.</summary>
        public bool? PropagateChanges { get; set; }
        /// <summary>If true, the content type can&apos;t be modified unless this value is first set to false.</summary>
        public bool? ReadOnly { get; set; }
        /// <summary>If true, the content type can&apos;t be modified by users or through push-down operations. Only site collection administrators can seal or unseal content types.</summary>
        public bool? Sealed { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::NoBackingStore.Graph.Models.ContentType"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::NoBackingStore.Graph.Models.ContentType CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::NoBackingStore.Graph.Models.ContentType();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "associatedHubsUrls", n => { AssociatedHubsUrls = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "base", n => { Base = n.GetObjectValue<global::NoBackingStore.Graph.Models.ContentType>(global::NoBackingStore.Graph.Models.ContentType.CreateFromDiscriminatorValue); } },
                { "baseTypes", n => { BaseTypes = n.GetCollectionOfObjectValues<global::NoBackingStore.Graph.Models.ContentType>(global::NoBackingStore.Graph.Models.ContentType.CreateFromDiscriminatorValue)?.AsList(); } },
                { "columnLinks", n => { ColumnLinks = n.GetCollectionOfObjectValues<global::NoBackingStore.Graph.Models.ColumnLink>(global::NoBackingStore.Graph.Models.ColumnLink.CreateFromDiscriminatorValue)?.AsList(); } },
                { "columnPositions", n => { ColumnPositions = n.GetCollectionOfObjectValues<global::NoBackingStore.Graph.Models.ColumnDefinition>(global::NoBackingStore.Graph.Models.ColumnDefinition.CreateFromDiscriminatorValue)?.AsList(); } },
                { "columns", n => { Columns = n.GetCollectionOfObjectValues<global::NoBackingStore.Graph.Models.ColumnDefinition>(global::NoBackingStore.Graph.Models.ColumnDefinition.CreateFromDiscriminatorValue)?.AsList(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "documentSet", n => { DocumentSet = n.GetObjectValue<global::NoBackingStore.Graph.Models.DocumentSet>(global::NoBackingStore.Graph.Models.DocumentSet.CreateFromDiscriminatorValue); } },
                { "documentTemplate", n => { DocumentTemplate = n.GetObjectValue<global::NoBackingStore.Graph.Models.DocumentSetContent>(global::NoBackingStore.Graph.Models.DocumentSetContent.CreateFromDiscriminatorValue); } },
                { "group", n => { Group = n.GetStringValue(); } },
                { "hidden", n => { Hidden = n.GetBoolValue(); } },
                { "inheritedFrom", n => { InheritedFrom = n.GetObjectValue<global::NoBackingStore.Graph.Models.ItemReference>(global::NoBackingStore.Graph.Models.ItemReference.CreateFromDiscriminatorValue); } },
                { "isBuiltIn", n => { IsBuiltIn = n.GetBoolValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "order", n => { Order = n.GetObjectValue<global::NoBackingStore.Graph.Models.ContentTypeOrder>(global::NoBackingStore.Graph.Models.ContentTypeOrder.CreateFromDiscriminatorValue); } },
                { "parentId", n => { ParentId = n.GetStringValue(); } },
                { "propagateChanges", n => { PropagateChanges = n.GetBoolValue(); } },
                { "readOnly", n => { ReadOnly = n.GetBoolValue(); } },
                { "sealed", n => { Sealed = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfPrimitiveValues<string>("associatedHubsUrls", AssociatedHubsUrls);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.ContentType>("base", Base);
            writer.WriteCollectionOfObjectValues<global::NoBackingStore.Graph.Models.ContentType>("baseTypes", BaseTypes);
            writer.WriteCollectionOfObjectValues<global::NoBackingStore.Graph.Models.ColumnLink>("columnLinks", ColumnLinks);
            writer.WriteCollectionOfObjectValues<global::NoBackingStore.Graph.Models.ColumnDefinition>("columnPositions", ColumnPositions);
            writer.WriteCollectionOfObjectValues<global::NoBackingStore.Graph.Models.ColumnDefinition>("columns", Columns);
            writer.WriteStringValue("description", Description);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.DocumentSet>("documentSet", DocumentSet);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.DocumentSetContent>("documentTemplate", DocumentTemplate);
            writer.WriteStringValue("group", Group);
            writer.WriteBoolValue("hidden", Hidden);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.ItemReference>("inheritedFrom", InheritedFrom);
            writer.WriteBoolValue("isBuiltIn", IsBuiltIn);
            writer.WriteStringValue("name", Name);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.ContentTypeOrder>("order", Order);
            writer.WriteStringValue("parentId", ParentId);
            writer.WriteBoolValue("propagateChanges", PropagateChanges);
            writer.WriteBoolValue("readOnly", ReadOnly);
            writer.WriteBoolValue("sealed", Sealed);
        }
    }
}
#pragma warning restore CS0618
