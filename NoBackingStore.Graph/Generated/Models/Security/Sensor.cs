// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace NoBackingStore.Graph.Models.Security
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Sensor : global::NoBackingStore.Graph.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The date and time when the sensor was generated. The Timestamp represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.</summary>
        public DateTimeOffset? CreatedDateTime { get; set; }
        /// <summary>The deploymentStatus property</summary>
        public global::NoBackingStore.Graph.Models.Security.DeploymentStatus? DeploymentStatus { get; set; }
        /// <summary>The display name of the sensor.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>The fully qualified domain name of the sensor.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DomainName { get; set; }
#nullable restore
#else
        public string DomainName { get; set; }
#endif
        /// <summary>Represents potential issues within a customer&apos;s Microsoft Defender for Identity configuration that Microsoft Defender for Identity identified related to the sensor.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.Security.HealthIssue>? HealthIssues { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.Security.HealthIssue> HealthIssues { get; set; }
#endif
        /// <summary>The healthStatus property</summary>
        public global::NoBackingStore.Graph.Models.Security.SensorHealthStatus? HealthStatus { get; set; }
        /// <summary>This field displays the count of health issues related to this sensor.</summary>
        public long? OpenHealthIssuesCount { get; set; }
        /// <summary>The sensorType property</summary>
        public global::NoBackingStore.Graph.Models.Security.SensorType? SensorType { get; set; }
        /// <summary>The settings property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.Security.SensorSettings? Settings { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.Security.SensorSettings Settings { get; set; }
#endif
        /// <summary>The version of the sensor.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Version { get; set; }
#nullable restore
#else
        public string Version { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::NoBackingStore.Graph.Models.Security.Sensor"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::NoBackingStore.Graph.Models.Security.Sensor CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::NoBackingStore.Graph.Models.Security.Sensor();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "deploymentStatus", n => { DeploymentStatus = n.GetEnumValue<global::NoBackingStore.Graph.Models.Security.DeploymentStatus>(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "domainName", n => { DomainName = n.GetStringValue(); } },
                { "healthIssues", n => { HealthIssues = n.GetCollectionOfObjectValues<global::NoBackingStore.Graph.Models.Security.HealthIssue>(global::NoBackingStore.Graph.Models.Security.HealthIssue.CreateFromDiscriminatorValue)?.AsList(); } },
                { "healthStatus", n => { HealthStatus = n.GetEnumValue<global::NoBackingStore.Graph.Models.Security.SensorHealthStatus>(); } },
                { "openHealthIssuesCount", n => { OpenHealthIssuesCount = n.GetLongValue(); } },
                { "sensorType", n => { SensorType = n.GetEnumValue<global::NoBackingStore.Graph.Models.Security.SensorType>(); } },
                { "settings", n => { Settings = n.GetObjectValue<global::NoBackingStore.Graph.Models.Security.SensorSettings>(global::NoBackingStore.Graph.Models.Security.SensorSettings.CreateFromDiscriminatorValue); } },
                { "version", n => { Version = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteEnumValue<global::NoBackingStore.Graph.Models.Security.DeploymentStatus>("deploymentStatus", DeploymentStatus);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteStringValue("domainName", DomainName);
            writer.WriteCollectionOfObjectValues<global::NoBackingStore.Graph.Models.Security.HealthIssue>("healthIssues", HealthIssues);
            writer.WriteEnumValue<global::NoBackingStore.Graph.Models.Security.SensorHealthStatus>("healthStatus", HealthStatus);
            writer.WriteLongValue("openHealthIssuesCount", OpenHealthIssuesCount);
            writer.WriteEnumValue<global::NoBackingStore.Graph.Models.Security.SensorType>("sensorType", SensorType);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.Security.SensorSettings>("settings", Settings);
            writer.WriteStringValue("version", Version);
        }
    }
}
#pragma warning restore CS0618
