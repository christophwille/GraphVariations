// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace NoBackingStore.Graph.Models
{
    /// <summary>
    /// Singleton entity which is used to specify IE mode site metadata
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class BrowserSite : global::NoBackingStore.Graph.Models.Entity, IParsable
    {
        /// <summary>Controls the behavior of redirected sites. If true, indicates that the site will open in Internet Explorer 11 or Microsoft Edge even if the site is navigated to as part of a HTTP or meta refresh redirection chain.</summary>
        public bool? AllowRedirect { get; set; }
        /// <summary>The comment for the site.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Comment { get; set; }
#nullable restore
#else
        public string Comment { get; set; }
#endif
        /// <summary>The compatibilityMode property</summary>
        public global::NoBackingStore.Graph.Models.BrowserSiteCompatibilityMode? CompatibilityMode { get; set; }
        /// <summary>The date and time when the site was created.</summary>
        public DateTimeOffset? CreatedDateTime { get; set; }
        /// <summary>The date and time when the site was deleted.</summary>
        public DateTimeOffset? DeletedDateTime { get; set; }
        /// <summary>The history of modifications applied to the site.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::NoBackingStore.Graph.Models.BrowserSiteHistory>? History { get; set; }
#nullable restore
#else
        public List<global::NoBackingStore.Graph.Models.BrowserSiteHistory> History { get; set; }
#endif
        /// <summary>The user who last modified the site.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::NoBackingStore.Graph.Models.IdentitySet? LastModifiedBy { get; set; }
#nullable restore
#else
        public global::NoBackingStore.Graph.Models.IdentitySet LastModifiedBy { get; set; }
#endif
        /// <summary>The date and time when the site was last modified.</summary>
        public DateTimeOffset? LastModifiedDateTime { get; set; }
        /// <summary>The mergeType property</summary>
        public global::NoBackingStore.Graph.Models.BrowserSiteMergeType? MergeType { get; set; }
        /// <summary>The status property</summary>
        public global::NoBackingStore.Graph.Models.BrowserSiteStatus? Status { get; set; }
        /// <summary>The targetEnvironment property</summary>
        public global::NoBackingStore.Graph.Models.BrowserSiteTargetEnvironment? TargetEnvironment { get; set; }
        /// <summary>The URL of the site.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WebUrl { get; set; }
#nullable restore
#else
        public string WebUrl { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::NoBackingStore.Graph.Models.BrowserSite"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::NoBackingStore.Graph.Models.BrowserSite CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::NoBackingStore.Graph.Models.BrowserSite();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "allowRedirect", n => { AllowRedirect = n.GetBoolValue(); } },
                { "comment", n => { Comment = n.GetStringValue(); } },
                { "compatibilityMode", n => { CompatibilityMode = n.GetEnumValue<global::NoBackingStore.Graph.Models.BrowserSiteCompatibilityMode>(); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "deletedDateTime", n => { DeletedDateTime = n.GetDateTimeOffsetValue(); } },
                { "history", n => { History = n.GetCollectionOfObjectValues<global::NoBackingStore.Graph.Models.BrowserSiteHistory>(global::NoBackingStore.Graph.Models.BrowserSiteHistory.CreateFromDiscriminatorValue)?.AsList(); } },
                { "lastModifiedBy", n => { LastModifiedBy = n.GetObjectValue<global::NoBackingStore.Graph.Models.IdentitySet>(global::NoBackingStore.Graph.Models.IdentitySet.CreateFromDiscriminatorValue); } },
                { "lastModifiedDateTime", n => { LastModifiedDateTime = n.GetDateTimeOffsetValue(); } },
                { "mergeType", n => { MergeType = n.GetEnumValue<global::NoBackingStore.Graph.Models.BrowserSiteMergeType>(); } },
                { "status", n => { Status = n.GetEnumValue<global::NoBackingStore.Graph.Models.BrowserSiteStatus>(); } },
                { "targetEnvironment", n => { TargetEnvironment = n.GetEnumValue<global::NoBackingStore.Graph.Models.BrowserSiteTargetEnvironment>(); } },
                { "webUrl", n => { WebUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteBoolValue("allowRedirect", AllowRedirect);
            writer.WriteStringValue("comment", Comment);
            writer.WriteEnumValue<global::NoBackingStore.Graph.Models.BrowserSiteCompatibilityMode>("compatibilityMode", CompatibilityMode);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteDateTimeOffsetValue("deletedDateTime", DeletedDateTime);
            writer.WriteCollectionOfObjectValues<global::NoBackingStore.Graph.Models.BrowserSiteHistory>("history", History);
            writer.WriteObjectValue<global::NoBackingStore.Graph.Models.IdentitySet>("lastModifiedBy", LastModifiedBy);
            writer.WriteDateTimeOffsetValue("lastModifiedDateTime", LastModifiedDateTime);
            writer.WriteEnumValue<global::NoBackingStore.Graph.Models.BrowserSiteMergeType>("mergeType", MergeType);
            writer.WriteEnumValue<global::NoBackingStore.Graph.Models.BrowserSiteStatus>("status", Status);
            writer.WriteEnumValue<global::NoBackingStore.Graph.Models.BrowserSiteTargetEnvironment>("targetEnvironment", TargetEnvironment);
            writer.WriteStringValue("webUrl", WebUrl);
        }
    }
}
#pragma warning restore CS0618
